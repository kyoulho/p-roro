import java.sql.Connection;
import java.sql.SQLException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class DBConnection {
    public static String JNDI_NAME = "jdbc/roroDB";
    public static String JDBC_URL = "jdbc:oracle:thin:@192.168.4.51:1521/orcl";

    public static Connection getConnection() throws SQLException, NamingException,  ClassNotFoundException{
        Context initCtx = new InitialContext();

        //initCtx의 lookup메서드를 이용해서 "java:comp/env" 에 해당하는 객체를 찾아서 evnCtx에 삽입
        Context envCtx = (Context) initCtx.lookup("java:comp/env");


        //envCtx의 lookup메서드를 이용해서 "jdbc/orcl"에 해당하는 객체를 찾아서 ds에 삽입
        DataSource ds = (DataSource) envCtx.lookup("jdbc/orcl");

        //getConnection메서드를 이용해서 커넥션 풀로 부터 커넥션 객체를 얻어내어 conn변수에 저장
        Connection conn = ds.getConnection();
        Context ctx = new InitialContext();
        javax.sql.DataSource ds
         = (javax.sql.DataSource) ctx.lookup ( "myDataSource" ); // "test"
        ds = (DataSource) envCtx.lookup(JNDI_NAME);
        return conn;

        <property name="jndiName" value = "jdbc/JUNHO_DB"/>

        JndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();
        return dataSourceLookup.getDataSource("java:jdbc/configurationFile");

        javax.sql.DataSource datasource = SqlMapMgrP.getSqlMap().getDataSource();

        @Resource(name="jdbc/fileUploadDS", type=javax.sql.DataSource.class, lookup = "jdbc/fileUploadDS")

        JdbcProperty jdbcProperty1 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:mysql://localhost:3306/DB명?useUnicode=true&characterEncoding=utf8");
        JdbcProperty jdbcProperty2 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:oracle:thin:@naver.com:1521:xe");
        JdbcProperty jdbcProperty3 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:oracle:thin:@//localhost:1521/XE");
        JdbcProperty jdbcProperty4 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:mariadb://100.100.100.7:3306/dbname");
        JdbcProperty jdbcProperty5 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:log4jdbc:mariadb://192.168.4.61:3306/roro");
        JdbcProperty jdbcProperty6 = UnknownDatabaseExtract.jdbcUrlParser(JDBC_URL);
        JdbcProperty jdbcProperty7 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:oracle:thin:@192.168.4.51:1521/orcl");
        JdbcProperty jdbcProperty8 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:tibero:thin:@127.0.0.1:8629:tibero");
        JdbcProperty jdbcProperty9 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:db2://db2type2:50000/db2-type2-database");
        JdbcProperty jdbcProperty10 = UnknownDatabaseExtract.jdbcUrlParser("jdbc:sqlserver://sqlserver2:1433;DatabaseName=cluster_sqlserver2;integratedSecurity=true");
        spring.datasource.url=jdbc:derby://localhost:1527/roroDB;create=true

        0.0.0.0
        192.168.0.100
        255.255.255.255
        1.1.1
        1.1.1.256
        1.1.1.1.1

        <Set name="url">jdbc:mysql://33.33.108.198:3306/athena</Set>

        try (Connection conn = DriverManager.getConnection(
                        "jdbc:postgresql://127.0.0.1:5432/test", "postgres", "password");
                     PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        /*
         * 위의 코드를 아래와 같이 줄여서 작성 가능하다.
         Context context = new InitialContext();
         DataSource dataSource = (DataSource) context.lookup("java:comp/env/jdbc/oracle");
         Connection con = dataSource.getConnection();
         */

         // 2022.04.22 도로공사 PoC 중 발생
         an external key, specify this URL:<pre>jdbc:derby:encDB;create=true;dataEncryption=true;encryptionAlgorithm=DES/CBC/NOPADDING;encryptionKey=62345242345 </pre>

         // 2022.06.10 Asics GAUCEiSeries
         url="jdbc:as400://172.22.241.11/slib;libraries=*LIBL SLIB;naming=sql;errors=full;block size=256;extended dynamic=true;package=JDBCGAU;package criteria=select"

         String roroUrl = "http://192.168.4.77:8082/";
    }
}