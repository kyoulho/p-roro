
DROP TABLE IF EXISTS COMMENT_MASTER;



DROP TABLE IF EXISTS DISK_MONITORING;



DROP TABLE IF EXISTS SERVER_DISK_INFORMATION;



DROP TABLE IF EXISTS ROLE_EXTINCTION_MAPPING;



DROP TABLE IF EXISTS DISCOVERED_HOST;



DROP TABLE IF EXISTS HOST_SCAN_HISTORY;



DROP TABLE IF EXISTS SETTING;



DROP TABLE IF EXISTS HIDDEN_FIELD;



DROP TABLE IF EXISTS DISCOVERED_THIRD_PARTY;



DROP TABLE IF EXISTS THIRD_PARTY_SEARCH_TYPE;



DROP TABLE IF EXISTS THIRD_PARTY_SOLUTION;



DROP TABLE IF EXISTS SERVER_STORAGE;



DROP TABLE IF EXISTS BACKUP_DEVICE;



DROP TABLE IF EXISTS SERVER_STATUS;



DROP TABLE IF EXISTS APPLICATION_STATUS;



DROP TABLE IF EXISTS EXCLUDED_EXTERNAL_CONNECTION;



DROP TABLE IF EXISTS EXCLUDED_EXCEL_SHEET;



DROP TABLE IF EXISTS DASHBOARD;



DROP TABLE IF EXISTS INVENTORY_MIGRATION_PROCESS_VOLUME;



DROP TABLE IF EXISTS MIGRATION_PRE_CONFIG_GROUP;



DROP TABLE IF EXISTS INVENTORY_LIFECYCLE_VERSION_LINK;



DROP TABLE IF EXISTS PRODUCT_LIFECYCLE_RULES_VERSION;



DROP TABLE IF EXISTS PRODUCT_LIFECYCLE_RULES;



DROP TABLE IF EXISTS MIGRATION_PRE_CONFIG_USER;



DROP TABLE IF EXISTS SURVEY_USER_ANSWER;



DROP TABLE IF EXISTS SURVEY_QUESTION;



DROP TABLE IF EXISTS SURVEY_PROCESS;



DROP TABLE IF EXISTS SURVEY;



DROP TABLE IF EXISTS MIGRATION_PRE_CONFIG_FILE;



DROP TABLE IF EXISTS TOPOLOGY_NODE_POSITION;



DROP TABLE IF EXISTS MEMORY_MONITORING;



DROP TABLE IF EXISTS EXTERNAL_CONNECTION_LABEL;



DROP TABLE IF EXISTS CODE_DOMAIN_REFERENCE_DETAIL;



DROP TABLE IF EXISTS CODE_DETAIL;



DROP TABLE IF EXISTS CODE_DOMAIN;



DROP TABLE IF EXISTS POSTS_ROLE;



DROP TABLE IF EXISTS TRACKING_INFO;



DROP TABLE IF EXISTS POSTS_POPUP;



DROP TABLE IF EXISTS MIDDLEWARE_INSTANCE_PROTOCOL;



DROP TABLE IF EXISTS CPU_MONITORING;



DROP TABLE IF EXISTS QUESTION_ANSWER;



DROP TABLE IF EXISTS ANSWER;



DROP TABLE IF EXISTS QUESTION;



DROP TABLE IF EXISTS SURVEY_CATEGORY;



DROP TABLE IF EXISTS USER_ROLE;



DROP TABLE IF EXISTS COPY_T;



DROP TABLE IF EXISTS INVENTORY_MANAGER;



DROP TABLE IF EXISTS MENU_PRGM;



DROP TABLE IF EXISTS MENU;



DROP TABLE IF EXISTS SERVICE_MANAGER;



DROP TABLE IF EXISTS INVENTORY_MIGRATION_PROCESS_TAG;



DROP TABLE IF EXISTS INVENTORY_MIGRATION_PROCESS;



DROP TABLE IF EXISTS MIGRATION_PRE_CONFIG;



DROP TABLE IF EXISTS SERVER_NETWORK_INFORMATION;



DROP TABLE IF EXISTS USER_CONFIG;



DROP TABLE IF EXISTS USER_NETWORK_FILTER;



DROP TABLE IF EXISTS NETWORK_FILTER_MASTER;



DROP TABLE IF EXISTS POSTS_ATTACH_FILE;



DROP TABLE IF EXISTS ATTACH_FILE;



DROP TABLE IF EXISTS POSTS;



DROP TABLE IF EXISTS BBS_META;



DROP TABLE IF EXISTS SERVICE_INVENTORY;



DROP TABLE IF EXISTS ROLE_PRGM;



DROP TABLE IF EXISTS PROGRAM;



DROP TABLE IF EXISTS ROLE_MASTER;



DROP TABLE IF EXISTS MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE;



DROP TABLE IF EXISTS MIDDLEWARE_INSTANCE;



DROP TABLE IF EXISTS DISCOVERED_INSTANCE_INTERFACE_IPS;



DROP TABLE IF EXISTS DISCOVERED_INSTANCE_INTERFACE;



DROP TABLE IF EXISTS USER_LOGIN_HISTORY;



DROP TABLE IF EXISTS USER_ACCESS;



DROP TABLE IF EXISTS USER_MASTER;



DROP TABLE IF EXISTS COMPANY_MASTER;



DROP TABLE IF EXISTS EXTERNAL_CONNECTION;



DROP TABLE IF EXISTS APPLICATION_MASTER;



DROP TABLE IF EXISTS SERVER_DAEMON;



DROP TABLE IF EXISTS SERVER_SUMMARY;



DROP TABLE IF EXISTS DATABASE_INSTANCE;



DROP TABLE IF EXISTS UPLOAD_INVENTORY;



DROP TABLE IF EXISTS DATABASE_SUMMARY;



DROP TABLE IF EXISTS DATABASE_MASTER;



DROP TABLE IF EXISTS DISCOVERED_PORT_RELATION_DETAIL;



DROP TABLE IF EXISTS DISCOVERED_PORT_RELATION;



DROP TABLE IF EXISTS SERVER_MASTER;



DROP TABLE IF EXISTS DISCOVERED_INSTANCE_MASTER;



DROP TABLE IF EXISTS MIDDLEWARE_SUMMARY;



DROP TABLE IF EXISTS MIDDLEWARE_MASTER;



DROP TABLE IF EXISTS INVENTORY_PROCESS_JSON_DETAIL;



DROP TABLE IF EXISTS INVENTORY_PROCESS_RESULT;



DROP TABLE IF EXISTS INVENTORY_PROCESS;



DROP TABLE IF EXISTS INVENTORY_PROCESS_GROUP;



DROP TABLE IF EXISTS SERVICE_LABEL;



DROP TABLE IF EXISTS SERVICE_MASTER;



DROP TABLE IF EXISTS INVENTORY_LABEL;



DROP TABLE IF EXISTS LABEL_MASTER;



DROP TABLE IF EXISTS INVENTORY_MASTER;



DROP TABLE IF EXISTS CREDENTIAL_MASTER;



DROP TABLE IF EXISTS PROJECT_MASTER;



CREATE TABLE ANSWER
(
    ANSWER_ID            BIGINT AUTO_INCREMENT COMMENT '',
    ANSWER_CONTENT_ENGLISH VARCHAR(1024) NULL COMMENT '',
    ANSWER_CONTENT_KOREAN VARCHAR(1024) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (ANSWER_ID)
);



CREATE TABLE APPLICATION_MASTER
(
    APPLICATION_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    DEPLOY_PATH          VARCHAR(200) NOT NULL COMMENT '',
    SOURCE_LOCATION_URI  VARCHAR(512) NULL COMMENT '',
    UPLOAD_SOURCE_FILE_NAME VARCHAR(100) NULL COMMENT '',
    UPLOAD_SOURCE_FILE_PATH VARCHAR(512) NULL COMMENT '',
    APPLICATION_SIZE     BIGINT NOT NULL COMMENT '',
    ANALYSIS_LIB_LIST    VARCHAR(512) NULL COMMENT '',
    ANALYSIS_STRING_LIST VARCHAR(512) NULL COMMENT '',
    AUTOMATIC_REGIST_PROTECTION_YN VARCHAR(1) NOT NULL COMMENT '',
    DEDICATED_AUTHENTICATION_YN VARCHAR(1) NOT NULL COMMENT '',
    JAVA_VERSION         VARCHAR(200) NULL COMMENT '',
    JAVA_VENDOR          VARCHAR(200) NULL COMMENT '',
    PRIMARY KEY (APPLICATION_INVENTORY_ID)
);



CREATE UNIQUE INDEX APP_MST_FK01 ON APPLICATION_MASTER
    (
     APPLICATION_INVENTORY_ID
        );



CREATE TABLE APPLICATION_STATUS
(
    APPLICATION_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    DEVELOP_LANGUAGE     VARCHAR(100) NULL COMMENT '',
    DEVELOP_LANGUAGE_VERSION VARCHAR(100) NULL COMMENT '',
    FRAMEWORK_NAME       VARCHAR(100) NULL COMMENT '',
    FRAMEWORK_VERSION    VARCHAR(100) NULL COMMENT '',
    HTTPS_USE_YN         VARCHAR(1) NULL COMMENT '',
    USE_DBMS             VARCHAR(512) NULL COMMENT '',
    PRIMARY KEY (APPLICATION_INVENTORY_ID)
);



CREATE UNIQUE INDEX _APPLICATION_STATUS_1 ON APPLICATION_STATUS
    (
     APPLICATION_INVENTORY_ID
        );



CREATE TABLE ATTACH_FILE
(
    ATTACH_FILE_ID       BIGINT AUTO_INCREMENT COMMENT '',
    ATTACH_FILE_NAME     VARCHAR(200) NOT NULL COMMENT '',
    ATTACH_FILE_NAME_SERVER VARCHAR(200) NOT NULL COMMENT '',
    ATTACH_FILE_PATH_SERVER VARCHAR(500) NOT NULL COMMENT '',
    ATTACH_FILE_SIZE     FLOAT NOT NULL COMMENT '',
    ATTACH_FILE_DOWNLOAD_COUNT INTEGER NOT NULL COMMENT '',
    REGIST_DATETIME      DATE NOT NULL COMMENT '',
    PRIMARY KEY (ATTACH_FILE_ID)
);



CREATE TABLE BACKUP_DEVICE
(
    BACKUP_DEVICE_ID     BIGINT AUTO_INCREMENT COMMENT '',
    MODEL                VARCHAR(100) NULL COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (BACKUP_DEVICE_ID)
);



CREATE INDEX _BACKUP_DEVICE_1 ON BACKUP_DEVICE
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE BBS_META
(
    BBS_META_CODE        INTEGER NOT NULL COMMENT '',
    BBS_KEY              VARCHAR(50) NOT NULL COMMENT '',
    BBS_OPEN_CODE        VARCHAR(6) NOT NULL COMMENT '',
    BBS_TYPE_CODE        VARCHAR(6) NOT NULL COMMENT '',
    BBS_COMMENT_YN       VARCHAR(1) NOT NULL COMMENT '',
    BBS_ATTACH_FILE_YN   VARCHAR(1) NOT NULL COMMENT '',
    BBS_ATTACH_FILE_ROOT_PATH VARCHAR(100) NULL COMMENT '',
    BBS_NAME             VARCHAR(200) NOT NULL COMMENT '',
    BBS_DESCRIPTION      VARCHAR(1000) NULL COMMENT '',
    BBS_SERVICE_YN       VARCHAR(1) NOT NULL COMMENT '',
    BBS_DELETE_YN        VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (BBS_META_CODE)
);



CREATE UNIQUE INDEX BBS_META_UI01 ON BBS_META
    (
     BBS_KEY
        );



CREATE TABLE CODE_DETAIL
(
    DOMAIN_CODE          INTEGER NOT NULL COMMENT '',
    COMMON_CODE          VARCHAR(8) NOT NULL COMMENT '',
    CODE_NAME_KOREAN     VARCHAR(100) NOT NULL COMMENT '',
    CODE_NAME_ENGLISH    VARCHAR(100) NULL COMMENT '',
    CODE_ABBREVIATION_KOREAN VARCHAR(50) NULL COMMENT '',
    CODE_ABBREVIATION_ENGLISH VARCHAR(50) NULL COMMENT '',
    CODE_DESCRIPTION_KOREAN VARCHAR(200) NULL COMMENT '',
    CODE_DESCRIPTION_ENGLISH VARCHAR(200) NULL COMMENT '',
    CODE_DISPLAY_NUMBER  INTEGER NOT NULL COMMENT '',
    CODE_VALID_YN        VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (DOMAIN_CODE,COMMON_CODE)
);



CREATE INDEX CODE_COMMON_FK01 ON CODE_DETAIL
    (
     DOMAIN_CODE
        );



CREATE TABLE CODE_DOMAIN
(
    DOMAIN_CODE          INTEGER NOT NULL COMMENT '',
    DOMAIN_NAME_KOREAN   VARCHAR(100) NOT NULL COMMENT '',
    DOMAIN_NAME_ENGLISH  VARCHAR(100) NULL COMMENT '',
    DOMAIN_DESCRIPTION_KOREAN VARCHAR(200) NULL COMMENT '',
    DOMAIN_DESCRIPTION_ENGLISH VARCHAR(200) NULL COMMENT '',
    DOMAIN_VALID_YN      VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (DOMAIN_CODE)
);



CREATE TABLE CODE_DOMAIN_REFERENCE_DETAIL
(
    DOMAIN_CODE          INTEGER NOT NULL COMMENT '',
    COMMON_CODE          VARCHAR(8) NOT NULL COMMENT '',
    REFERENCE_DOMAIN_CODE INTEGER NOT NULL COMMENT '',
    REFERENCE_COMMON_CODE VARCHAR(8) NOT NULL COMMENT '',
    PRIMARY KEY (DOMAIN_CODE,COMMON_CODE,REFERENCE_DOMAIN_CODE,REFERENCE_COMMON_CODE)
);



CREATE INDEX CODE_DOMAIN_REF_DTL_FK01 ON CODE_DOMAIN_REFERENCE_DETAIL
    (
     DOMAIN_CODE,
     COMMON_CODE
        );



CREATE INDEX CODE_DOMAIN_REF_DTL_FK02 ON CODE_DOMAIN_REFERENCE_DETAIL
    (
     REFERENCE_DOMAIN_CODE,
     REFERENCE_COMMON_CODE
        );



CREATE TABLE COMMENT_MASTER
(
    COMMENT_ID           BIGINT AUTO_INCREMENT COMMENT '',
    POST_ID              BIGINT NOT NULL COMMENT '',
    GROUP_COMMENT_ID     BIGINT NOT NULL COMMENT '',
    COMMENT_LEVEL        INTEGER NOT NULL COMMENT '',
    COMMENT_STEP         INTEGER NOT NULL COMMENT '',
    COMMENT_CONTENT      VARCHAR(3000) NOT NULL COMMENT '',
    COMMENT_DELETE_YN    VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (COMMENT_ID)
);



CREATE INDEX CMT_MST_FK01 ON COMMENT_MASTER
    (
     POST_ID
        );



CREATE INDEX CMT_MST_FK02 ON COMMENT_MASTER
    (
     GROUP_COMMENT_ID
        );



CREATE TABLE COMPANY_MASTER
(
    COMPANY_CODE         VARCHAR(8) NOT NULL COMMENT '',
    COUNTRY_CODE         VARCHAR(6) NULL COMMENT '',
    COMPANY_STATUS_CODE  VARCHAR(6) NOT NULL COMMENT '',
    COMPANY_NAME_KOREAN  VARCHAR(100) NULL COMMENT '',
    COMPANY_NAME_ENGLISH VARCHAR(100) NULL COMMENT '',
    COMPANY_REPRESENTATIVE_NAME VARCHAR(100) NULL COMMENT '',
    COMPANY_PHONE        VARCHAR(20) NULL COMMENT '',
    COMPANY_FAX          VARCHAR(20) NULL COMMENT '',
    COMPANY_ZIP_CODE     VARCHAR(8) NULL COMMENT '',
    COMPANY_ADDRESS      VARCHAR(200) NULL COMMENT '',
    COMPANY_ADDRESS_DETAIL VARCHAR(200) NULL COMMENT '',
    COMPANY_URL          VARCHAR(100) NULL COMMENT '',
    COMPANY_REMARKS      VARCHAR(1000) NULL COMMENT '',
    COMPANY_CORPORATION_NUMBER VARCHAR(20) NULL COMMENT '',
    COMPANY_BUSINESS_NUMBER VARCHAR(12) NULL COMMENT '',
    COMPANY_EMPLOYEE_COUNT INTEGER NULL COMMENT '',
    COMPANY_INDUSTRY_TYPE_CODE VARCHAR(6) NULL COMMENT '',
    COMPANY_TEST_YN      VARCHAR(1) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (COMPANY_CODE)
);



CREATE TABLE COPY_T
(
    NO_INT               INTEGER NOT NULL COMMENT '',
    NO_STR               VARCHAR(10) NOT NULL COMMENT '',
    PRIMARY KEY (NO_INT)
);



CREATE TABLE CPU_MONITORING
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    MONITORING_DATETIME  DATETIME NOT NULL COMMENT '',
    SAMPLE_COUNT         INTEGER NULL COMMENT '',
    CPU_AVG              FLOAT NULL COMMENT '',
    CPU_MAX              FLOAT NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID,MONITORING_DATETIME)
);



CREATE INDEX _CPU_MONITORING_1 ON CPU_MONITORING
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE CREDENTIAL_MASTER
(
    CREDENTIAL_ID        BIGINT AUTO_INCREMENT COMMENT '',
    CREDENTIAL_NAME      VARCHAR(50) NULL COMMENT '',
    PROJECT_ID           BIGINT NULL COMMENT '',
    CREDENTIAL_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    ACCESS_KEY           VARCHAR(100) NULL COMMENT '',
    SECRET_KEY           VARCHAR(100) NULL COMMENT '',
    USER_NAME            VARCHAR(100) NULL COMMENT '',
    USER_PASSWORD        VARCHAR(512) NULL COMMENT '',
    KEY_FILE_NAME        VARCHAR(100) NULL COMMENT '',
    KEY_FILE_PATH        VARCHAR(200) NULL COMMENT '',
    KEY_FILE_CONTENT     VARCHAR(4096) NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (CREDENTIAL_ID)
);



CREATE INDEX CERT_MST_FK01 ON CREDENTIAL_MASTER
    (
     PROJECT_ID
        );



CREATE TABLE DASHBOARD
(
    DASHBOARD_ID         BIGINT AUTO_INCREMENT COMMENT '',
    PROJECT_ID           BIGINT NULL COMMENT '',
    CONFIG_CONTENTS      LONGTEXT NULL COMMENT '',
    USER_ID              BIGINT NULL COMMENT '',
    PRIMARY KEY (DASHBOARD_ID)
);



CREATE INDEX _DASHBOARD_1 ON DASHBOARD
    (
     PROJECT_ID
        );



CREATE INDEX _DASHBOARD_2 ON DASHBOARD
    (
     USER_ID
        );



CREATE TABLE DATABASE_INSTANCE
(
    DATABASE_INSTANCE_ID BIGINT NOT NULL COMMENT '',
    DATABASE_SERVICE_NAME VARCHAR(200) NULL COMMENT '',
    JDBC_URL             VARCHAR(1024) NULL COMMENT '',
    USER_NAME            VARCHAR(100) NULL COMMENT '',
    TABLE_COUNT          INTEGER NULL COMMENT '',
    VIEW_COUNT           INTEGER NULL COMMENT '',
    FUNCTION_COUNT       INTEGER NULL COMMENT '',
    PROCEDURE_COUNT      INTEGER NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (DATABASE_INSTANCE_ID)
);



CREATE UNIQUE INDEX DBMS_INST_FK01 ON DATABASE_INSTANCE
    (
     DATABASE_INSTANCE_ID
        );



CREATE TABLE DATABASE_MASTER
(
    DATABASE_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    DATABASE_SERVICE_NAME VARCHAR(200) NOT NULL COMMENT '',
    JDBC_URL             VARCHAR(1024) NULL COMMENT '',
    DATABASE_ACCESS_CONTROL_SYSTEM_SOLUTION_NAME VARCHAR(200) NULL COMMENT '',
    DISCOVERED_DATABASE_YN VARCHAR(1) NOT NULL COMMENT '',
    VENDOR               VARCHAR(100) NOT NULL COMMENT '',
    ENGINE_VERSION       VARCHAR(100) NOT NULL COMMENT '',
    CONNECTION_PORT      INTEGER NULL COMMENT '',
    ALL_SCAN_YN          VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (DATABASE_INVENTORY_ID)
);



CREATE UNIQUE INDEX DBMS_MST_FK01 ON DATABASE_MASTER
    (
     DATABASE_INVENTORY_ID
        );



CREATE TABLE DATABASE_SUMMARY
(
    DATABASE_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    HOST_NAME            VARCHAR(100) NOT NULL COMMENT '',
    VERSION              VARCHAR(100) NOT NULL COMMENT '',
    STARTUP_DATETIME     DATETIME NULL COMMENT '',
    DB_SIZE_MB           BIGINT NULL COMMENT '',
    PRIMARY KEY (DATABASE_INVENTORY_ID)
);



CREATE UNIQUE INDEX DBMS_SMRY_FK01 ON DATABASE_SUMMARY
    (
     DATABASE_INVENTORY_ID
        );



CREATE TABLE DISCOVERED_HOST
(
    IP_ADDRESS           VARCHAR(100) NOT NULL COMMENT '',
    SCAN_HISTORY_ID      BIGINT NOT NULL COMMENT '',
    REPLY_TTL            INTEGER NULL COMMENT '',
    OS_NAME              VARCHAR(20) NULL COMMENT '',
    DISCOVERED_DATETIME  DATETIME NULL COMMENT '',
    PRIMARY KEY (IP_ADDRESS,SCAN_HISTORY_ID)
);



CREATE INDEX _DISCOVERED_HOST_1 ON DISCOVERED_HOST
    (
     SCAN_HISTORY_ID
        );



CREATE TABLE DISCOVERED_INSTANCE_INTERFACE
(
    DISCOVERED_INSTANCE_INTERFACE_ID BIGINT NOT NULL COMMENT '',
    DISCOVERED_INSTANCE_INTERFACE_SEQ INTEGER NOT NULL COMMENT '',
    DISCOVERED_INSTANCE_INTERFACE_DETAIL_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    DESCRIPTORS_NAME     VARCHAR(100) NOT NULL COMMENT '',
    FULL_DESCRIPTORS     VARCHAR(1024) NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_INSTANCE_INTERFACE_ID,DISCOVERED_INSTANCE_INTERFACE_SEQ)
);



CREATE INDEX DISC_INST_IF_FK01 ON DISCOVERED_INSTANCE_INTERFACE
    (
     DISCOVERED_INSTANCE_INTERFACE_ID
        );



CREATE TABLE DISCOVERED_INSTANCE_INTERFACE_IPS
(
    DISCOVERED_INSTANCE_INTERFACE_ID BIGINT NOT NULL COMMENT '',
    DISCOVERED_INSTANCE_INTERFACE_SEQ INTEGER NOT NULL COMMENT '',
    DISCOVERED_INSTANCE_INTERFACE_IP_ADDRESS VARCHAR(100) NOT NULL COMMENT '',
    SERVICE_NAME         VARCHAR(100) NULL COMMENT '',
    SERVICE_PORT         INTEGER NOT NULL COMMENT '',
    USER_NAME            VARCHAR(100) NULL COMMENT '',
    USER_PASSWORD        VARCHAR(200) NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_INSTANCE_INTERFACE_ID,DISCOVERED_INSTANCE_INTERFACE_SEQ,DISCOVERED_INSTANCE_INTERFACE_IP_ADDRESS)
);



CREATE INDEX DISC_INST_IF_IPS_FK01 ON DISCOVERED_INSTANCE_INTERFACE_IPS
    (
     DISCOVERED_INSTANCE_INTERFACE_ID,
     DISCOVERED_INSTANCE_INTERFACE_SEQ
        );



CREATE TABLE DISCOVERED_INSTANCE_MASTER
(
    DISCOVERED_INSTANCE_ID BIGINT AUTO_INCREMENT COMMENT '',
    POSSESSION_INVENTORY_ID BIGINT NULL COMMENT '',
    FINDER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    INVENTORY_TYPE_CODE  VARCHAR(8) NOT NULL COMMENT '',
    INVENTORY_DETAIL_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    INVENTORY_REGIST_TYPE_CODE VARCHAR(8) NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    DISCOVERED_IP_ADDRESS VARCHAR(100) NOT NULL COMMENT '',
    DISCOVERED_DETAIL_DIVISION VARCHAR(200) NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_INSTANCE_ID)
);



CREATE INDEX DISC_INST_MST_FK02 ON DISCOVERED_INSTANCE_MASTER
    (
     PROJECT_ID
        );



CREATE INDEX DISC_INST_MST_FK01 ON DISCOVERED_INSTANCE_MASTER
    (
     POSSESSION_INVENTORY_ID
        );



CREATE INDEX _DISCOVERED_INSTANCE_MASTER_3 ON DISCOVERED_INSTANCE_MASTER
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE DISCOVERED_PORT_RELATION
(
    DISCOVERED_PORT_RELATION_ID BIGINT AUTO_INCREMENT COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NULL COMMENT '',
    SVR_INV_IP_ADDR      VARCHAR(100) NULL COMMENT '',
    INVENTORY_CONNECTION_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    INVENTORY_DIRECTION_PORT_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    KNOWN_PORT_NAME      VARCHAR(20) NULL COMMENT '',
    SERVICE_PORT         INTEGER NOT NULL COMMENT '',
    TARGET_IP_ADDRESS    VARCHAR(100) NULL COMMENT '',
    PROTOCOL             VARCHAR(100) NULL COMMENT '',
    UNIQUE_KEY           VARCHAR(200) NOT NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_PORT_RELATION_ID)
);



CREATE INDEX DISC_PORT_RELAT_FK01 ON DISCOVERED_PORT_RELATION
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE DISCOVERED_PORT_RELATION_DETAIL
(
    DISCOVERED_PORT_RELATION_DETAIL_ID BIGINT AUTO_INCREMENT COMMENT '',
    DISCOVERED_PORT_RELATION_ID BIGINT NOT NULL COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    PROCESS_COMMAND_USER_NAME VARCHAR(50) NULL COMMENT '',
    PROCESS_COMMAND      VARCHAR(200) NOT NULL COMMENT '',
    CONNECTION_STATUS_TYPE_CODE VARCHAR(8) NOT NULL COMMENT '',
    LOCAL_PORT           INTEGER NULL COMMENT '',
    FOREIGN_PORT         INTEGER NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_PORT_RELATION_DETAIL_ID)
);



CREATE INDEX DISC_PORT_RELAT_DTL_FK01 ON DISCOVERED_PORT_RELATION_DETAIL
    (
     DISCOVERED_PORT_RELATION_ID
        );



CREATE TABLE DISCOVERED_THIRD_PARTY
(
    DISCOVERED_THIRD_PARTY_ID BIGINT AUTO_INCREMENT COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    THIRD_PARTY_SEARCH_TYPE_ID BIGINT NOT NULL COMMENT '',
    FIND_CONTENTS        LONGTEXT NOT NULL COMMENT '',
    PRIMARY KEY (DISCOVERED_THIRD_PARTY_ID)
);



CREATE INDEX _DISCOVERED_THIRD_PARTY_1 ON DISCOVERED_THIRD_PARTY
    (
     THIRD_PARTY_SEARCH_TYPE_ID
        );



CREATE INDEX _DISCOVERED_THIRD_PARTY_2 ON DISCOVERED_THIRD_PARTY
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE DISK_MONITORING
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    MONITORING_DATETIME  DATETIME NOT NULL COMMENT '',
    DEVICE_NAME          VARCHAR(200) NOT NULL COMMENT '',
    SAMPLE_COUNT         INTEGER NULL COMMENT '',
    DISK_AVG             FLOAT NULL COMMENT '',
    DISK_MAX             FLOAT NULL COMMENT '',
    DISK_USAGE_AVG       FLOAT NULL COMMENT '',
    DISK_USAGE_MAX       FLOAT NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID,MONITORING_DATETIME,DEVICE_NAME)
);



CREATE INDEX _DISK_MONITORING_1 ON DISK_MONITORING
    (
     SERVER_INVENTORY_ID,
     DEVICE_NAME
        );



CREATE TABLE EXCLUDED_EXCEL_SHEET
(
    EXCLUDED_EXCEL_SHEET_ID BIGINT AUTO_INCREMENT COMMENT '',
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    SHEET_NAME           VARCHAR(200) NOT NULL COMMENT '',
    PRIMARY KEY (EXCLUDED_EXCEL_SHEET_ID)
);



CREATE INDEX _EXCLUDED_EXCEL_SHEET_1 ON EXCLUDED_EXCEL_SHEET
    (
     INVENTORY_ID
        );



CREATE TABLE EXCLUDED_EXTERNAL_CONNECTION
(
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    IP                   VARCHAR(512) NOT NULL COMMENT '',
    PRIMARY KEY (PROJECT_ID,IP)
);



CREATE INDEX _EXCLUDED_EXTERNAL_CONNECTION_1 ON EXCLUDED_EXTERNAL_CONNECTION
    (
     PROJECT_ID
        );



CREATE TABLE EXTERNAL_CONNECTION
(
    EXTERNAL_CONNECTION_ID BIGINT AUTO_INCREMENT COMMENT '',
    LINE_NUM             INTEGER NULL COMMENT '',
    FILE_NAME            VARCHAR(1024) NULL COMMENT '',
    PROTOCOL             VARCHAR(20) NULL COMMENT '',
    IP                   VARCHAR(512) NULL COMMENT '',
    PORT                 INTEGER NULL COMMENT '',
    APPLICATION_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (EXTERNAL_CONNECTION_ID)
);



CREATE INDEX _EXTERNAL_CONNECTION_1 ON EXTERNAL_CONNECTION
    (
     APPLICATION_INVENTORY_ID
        );



CREATE TABLE EXTERNAL_CONNECTION_LABEL
(
    IP                   VARCHAR(512) NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    LABEL                VARCHAR(1024) NULL COMMENT '',
    PRIMARY KEY (IP,PROJECT_ID)
);



CREATE INDEX _EXTERNAL_CONNECTION_LABEL_1 ON EXTERNAL_CONNECTION_LABEL
    (
     PROJECT_ID
        );



CREATE TABLE HIDDEN_FIELD
(
    USER_ID              BIGINT NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    INVENTORY_TYPE_CODE  VARCHAR(8) NOT NULL COMMENT '',
    FIELD_NAMES          LONGTEXT NULL COMMENT '',
    PRIMARY KEY (USER_ID,PROJECT_ID,INVENTORY_TYPE_CODE)
);



CREATE INDEX _HIDDEN_FIELD_1 ON HIDDEN_FIELD
    (
     PROJECT_ID
        );



CREATE INDEX _HIDDEN_FIELD_2 ON HIDDEN_FIELD
    (
     USER_ID
        );



CREATE TABLE HOST_SCAN_HISTORY
(
    SCAN_HISTORY_ID      BIGINT AUTO_INCREMENT COMMENT '',
    CIDR                 VARCHAR(20) NULL COMMENT '',
    SCAN_START_DATETIME  DATETIME NULL COMMENT '',
    SCAN_END_DATETIME    DATETIME NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    DISCOVERED_HOST_COUNT INTEGER NULL COMMENT '',
    COMPLETED_YN         VARCHAR(1) NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NULL COMMENT '',
    PRIMARY KEY (SCAN_HISTORY_ID)
);



CREATE INDEX _HOST_SCAN_HISTORY_1 ON HOST_SCAN_HISTORY
    (
     PROJECT_ID
        );



CREATE TABLE INVENTORY_LABEL
(
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    LABEL_ID             BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_ID,LABEL_ID)
);



CREATE INDEX INV_LBL_FK02 ON INVENTORY_LABEL
    (
     LABEL_ID
        );



CREATE INDEX INV_LBL_FK01 ON INVENTORY_LABEL
    (
     INVENTORY_ID
        );



CREATE TABLE INVENTORY_LIFECYCLE_VERSION_LINK
(
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    JAVA_VERSION_ID      BIGINT NULL COMMENT '',
    PRODUCT_VERSION_ID   BIGINT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_ID)
);



CREATE INDEX _INVENTORY_LIFECYCLE_VERSION_LINK_1 ON INVENTORY_LIFECYCLE_VERSION_LINK
    (
     JAVA_VERSION_ID
        );



CREATE INDEX _INVENTORY_LIFECYCLE_VERSION_LINK_2 ON INVENTORY_LIFECYCLE_VERSION_LINK
    (
     PRODUCT_VERSION_ID
        );



CREATE UNIQUE INDEX _INVENTORY_LIFECYCLE_VERSION_LINK_3 ON INVENTORY_LIFECYCLE_VERSION_LINK
    (
     INVENTORY_ID
        );



CREATE TABLE INVENTORY_MANAGER
(
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    USER_ID              BIGINT NOT NULL COMMENT '',
    MANAGER_TYPE_CODE    VARCHAR(20) NOT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_ID,USER_ID,MANAGER_TYPE_CODE)
);



CREATE INDEX INV_MGR_FK02 ON INVENTORY_MANAGER
    (
     USER_ID
        );



CREATE INDEX INV_MGR_FK01 ON INVENTORY_MANAGER
    (
     INVENTORY_ID
        );



CREATE TABLE INVENTORY_MASTER
(
    INVENTORY_ID         BIGINT AUTO_INCREMENT COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NULL COMMENT '',
    INVENTORY_TYPE_CODE  VARCHAR(8) NOT NULL COMMENT '',
    INVENTORY_DETAIL_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    INVENTORY_NAME       VARCHAR(100) NOT NULL COMMENT '',
    INVENTORY_ANALYSIS_YN VARCHAR(1) NOT NULL COMMENT '',
    CUSTOMER_INVENTORY_CODE VARCHAR(100) NULL COMMENT '',
    CUSTOMER_INVENTORY_NAME VARCHAR(200) NULL COMMENT '',
    INVENTORY_IP_TYPE_CODE VARCHAR(8) NOT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NULL COMMENT '삭제여부 [101]',
    AUTOMATIC_REGIST_YN  VARCHAR(1) NULL COMMENT '',
    INVENTORY_DISCOVERED_DATETIME DATETIME NULL COMMENT '',
    DESCRIPTION          VARCHAR(500) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    CREDENTIAL_ID        BIGINT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_ID)
);



CREATE INDEX INV_MST_FK02 ON INVENTORY_MASTER
    (
     PROJECT_ID
        );



CREATE INDEX INV_MST_FK03 ON INVENTORY_MASTER
    (
     CREDENTIAL_ID
        );



CREATE INDEX INV_MST_FK01 ON INVENTORY_MASTER
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE INVENTORY_MIGRATION_PROCESS
(
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    MIGRATION_PRE_CONFIG_ID BIGINT NULL COMMENT '',
    EXCLUDE_DIRECTORIES  VARCHAR(512) NULL COMMENT '',
    SWAP_SIZE            INTEGER NULL COMMENT '',
    REGION               VARCHAR(200) NULL COMMENT '',
    SUBNET_ID            VARCHAR(200) NULL COMMENT '',
    SECURITY_GROUP_IDS   VARCHAR(512) NULL COMMENT '',
    ENABLE_EIP_YN        VARCHAR(1) NULL COMMENT '',
    PRIVATE_IP           VARCHAR(100) NULL COMMENT '',
    INSTANCE_TYPE        VARCHAR(20) NULL COMMENT '',
    DESCRIPTION          VARCHAR(1024) NULL COMMENT '',
    VPC_ID               VARCHAR(200) NULL COMMENT '',
    VPC_NAME             VARCHAR(200) NULL COMMENT '',
    HOST_NAME            VARCHAR(200) NOT NULL COMMENT '',
    ESTIMATE_TIME        INTEGER NULL COMMENT '',
    GCP_PROJECT_ID       VARCHAR(512) NULL COMMENT '',
    NETWORK_TAGS         VARCHAR(512) NULL COMMENT '',
    SUBNET_NAME          VARCHAR(200) NULL COMMENT '',
    INSTANCE_LAUNCH_TIME DATETIME NULL COMMENT '',
    AVAILABILITY_ZONE    VARCHAR(200) NULL COMMENT '',
    SECURITY_GROUP_NAMES VARCHAR(512) NULL COMMENT '',
    BLOCK_DEVICES        VARCHAR(512) NULL COMMENT '',
    PUBLIC_IP            VARCHAR(100) NULL COMMENT '',
    INSTANCE_ID          VARCHAR(200) NULL COMMENT '',
    INSTANCE_NAME        VARCHAR(200) NULL COMMENT '',
    IMAGE_ID             VARCHAR(200) NULL COMMENT '',
    IMAGE_NAME           VARCHAR(200) NULL COMMENT '',
    FIREWALLS            VARCHAR(512) NULL COMMENT '',
    CREDENTIAL_ID        BIGINT NULL COMMENT '',
    ELAPSED_TIME         BIGINT NOT NULL COMMENT '',
    INTERNAL_STATUS      VARCHAR(30) NULL COMMENT '',
    PROGRESS             FLOAT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_PROCESS_ID)
);



CREATE INDEX _INVENTORY_MIGRATION_PROCESS_2 ON INVENTORY_MIGRATION_PROCESS
    (
     MIGRATION_PRE_CONFIG_ID
        );



CREATE INDEX _INVENTORY_MIGRATION_PROCESS_3 ON INVENTORY_MIGRATION_PROCESS
    (
     CREDENTIAL_ID
        );



CREATE UNIQUE INDEX _INVENTORY_MIGRATION_PROCESS_1 ON INVENTORY_MIGRATION_PROCESS
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE INVENTORY_MIGRATION_PROCESS_TAG
(
    MIGRATION_TAG_ID     BIGINT AUTO_INCREMENT COMMENT '',
    TAG_NAME             VARCHAR(200) NULL COMMENT '',
    TAG_VALUE            VARCHAR(200) NULL COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (MIGRATION_TAG_ID)
);



CREATE INDEX _INVENTORY_MIGRATION_PROCESS_TAG_1 ON INVENTORY_MIGRATION_PROCESS_TAG
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE INVENTORY_MIGRATION_PROCESS_VOLUME
(
    MIGRATION_VOLUME_ID  BIGINT AUTO_INCREMENT COMMENT '',
    VOLUME_PATH          VARCHAR(512) NULL COMMENT '',
    VOLUME_SIZE          BIGINT NULL COMMENT '',
    RAW_FILE_NAME        VARCHAR(200) NULL COMMENT '',
    RAW_FILE_SIZE        BIGINT NULL COMMENT '',
    ROOT_YN              VARCHAR(1) NULL COMMENT '',
    MANIFEST_URL         VARCHAR(512) NULL COMMENT '',
    VOLUME_ID            VARCHAR(200) NULL COMMENT '',
    DEVICE_NAME          VARCHAR(200) NULL COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (MIGRATION_VOLUME_ID)
);



CREATE INDEX _INVENTORY_MIGRATION_PROCESS_VOLUME_1 ON INVENTORY_MIGRATION_PROCESS_VOLUME
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE INVENTORY_PROCESS
(
    INVENTORY_PROCESS_ID BIGINT AUTO_INCREMENT COMMENT '',
    INVENTORY_PROCESS_GROUP_ID BIGINT NULL COMMENT '',
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    INVENTORY_PROCESS_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_CODE VARCHAR(8) NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_TXT VARCHAR(4000) NULL COMMENT '',
    INVENTORY_PROCESS_START_DATETIME DATETIME NULL COMMENT '',
    INVENTORY_PROCESS_END_DATETIME DATETIME NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_PROCESS_ID)
);



CREATE INDEX INV_PROC_FK01 ON INVENTORY_PROCESS
    (
     INVENTORY_ID
        );



CREATE INDEX INV_PROC_FK02 ON INVENTORY_PROCESS
    (
     INVENTORY_PROCESS_GROUP_ID
        );



CREATE TABLE INVENTORY_PROCESS_GROUP
(
    INVENTORY_PROCESS_GROUP_ID BIGINT AUTO_INCREMENT COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NULL COMMENT '',
    PRIMARY KEY (INVENTORY_PROCESS_GROUP_ID)
);



CREATE TABLE INVENTORY_PROCESS_JSON_DETAIL
(
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    JSON_KEY             VARCHAR(200) NOT NULL COMMENT '',
    JSON_CONTENT         LONGTEXT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_PROCESS_ID,JSON_KEY)
);



CREATE INDEX INV_PROC_JSON_DTL_FK01 ON INVENTORY_PROCESS_JSON_DETAIL
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE INVENTORY_PROCESS_RESULT
(
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_JSON LONGTEXT NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_JSON_PATH VARCHAR(200) NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_EXCEL_PATH VARCHAR(200) NULL COMMENT '',
    INVENTORY_PROCESS_RESULT_META_LIST VARCHAR(4096) NULL COMMENT '',
    PRIMARY KEY (INVENTORY_PROCESS_ID)
);



CREATE UNIQUE INDEX INV_PROC_ORG_RSLT_FK01 ON INVENTORY_PROCESS_RESULT
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE LABEL_MASTER
(
    LABEL_ID             BIGINT AUTO_INCREMENT COMMENT '',
    LABEL_NAME           VARCHAR(100) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NULL COMMENT '',
    PRIMARY KEY (LABEL_ID)
);



CREATE TABLE MEMORY_MONITORING
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    MONITORING_DATETIME  DATETIME NOT NULL COMMENT '',
    SAMPLE_COUNT         INTEGER NULL COMMENT '',
    MEMORY_AVG           FLOAT NULL COMMENT '',
    MEMORY_MAX           FLOAT NULL COMMENT '',
    MEMORY_USAGE_AVG     FLOAT NULL COMMENT '',
    MEMORY_USAGE_MAX     FLOAT NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID,MONITORING_DATETIME)
);



CREATE INDEX _MEMORY_MONITORING_1 ON MEMORY_MONITORING
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE MENU
(
    MENU_NUMBER          INTEGER NOT NULL COMMENT '메뉴ID',
    PARENT_MENU_NUMBER   INTEGER NULL COMMENT '상위메뉴ID',
    MENU_NAME            VARCHAR(100) NOT NULL COMMENT '메뉴명',
    MENU_URL             VARCHAR(200) NULL COMMENT '',
    MENU_PATH            VARCHAR(200) NULL COMMENT '',
    MENU_DISPLAY_NUMBER  INTEGER NOT NULL COMMENT '표시순서',
    MENU_VALID_YN        VARCHAR(1) NOT NULL COMMENT '유효여부',
    PRIMARY KEY (MENU_NUMBER)
);



CREATE INDEX MENU_FK01 ON MENU
    (
     PARENT_MENU_NUMBER
        );



CREATE TABLE MENU_PRGM
(
    MENU_NUMBER          INTEGER NOT NULL COMMENT '메뉴ID',
    PROGRAM_ID           VARCHAR(100) NOT NULL COMMENT '',
    PRIMARY KEY (MENU_NUMBER,PROGRAM_ID)
);



CREATE INDEX MENU_PRGM_FK01 ON MENU_PRGM
    (
     MENU_NUMBER
        );



CREATE INDEX MENU_PRGM_FK02 ON MENU_PRGM
    (
     PROGRAM_ID
        );



CREATE TABLE MIDDLEWARE_INSTANCE
(
    MIDDLEWARE_INSTANCE_ID BIGINT NOT NULL COMMENT '',
    MIDDLEWARE_INSTANCE_NAME VARCHAR(100) NOT NULL COMMENT '',
    MIDDLEWARE_INSTANCE_PATH VARCHAR(512) NULL COMMENT '',
    MIDDLEWARE_CONFIG_PATH VARCHAR(512) NULL COMMENT '',
    MIDDLEWARE_PROFILE_NAME VARCHAR(50) NULL COMMENT '',
    MIDDLEWARE_CELL_NAME VARCHAR(50) NULL COMMENT '',
    MIDDLEWARE_NODE_NAME VARCHAR(50) NULL COMMENT '',
    MIDDLEWARE_SERVER_NAME VARCHAR(50) NULL COMMENT '',
    RUNNING_USER         VARCHAR(50) NULL COMMENT '',
    JAVA_VERSION         VARCHAR(200) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (MIDDLEWARE_INSTANCE_ID)
);



CREATE UNIQUE INDEX MW_INST_FK01 ON MIDDLEWARE_INSTANCE
    (
     MIDDLEWARE_INSTANCE_ID
        );



CREATE TABLE MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE
(
    MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE_ID BIGINT AUTO_INCREMENT COMMENT '',
    MIDDLEWARE_INSTANCE_ID BIGINT NULL COMMENT '',
    APPLICATION_INSTANCE_ID BIGINT NULL COMMENT '',
    CONTEXT_PATH         VARCHAR(100) NULL COMMENT '',
    RELOADABLE_YN        VARCHAR(1) NOT NULL COMMENT '',
    AUTO_DEPLOY_YN       VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE_ID)
);



CREATE INDEX MW_INST_APP_INST_FK01 ON MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE
    (
     MIDDLEWARE_INSTANCE_ID
        );



CREATE INDEX MW_INST_APP_INST_FK02 ON MIDDLEWARE_INSTANCE_APPLICATION_INSTANCE
    (
     APPLICATION_INSTANCE_ID
        );



CREATE TABLE MIDDLEWARE_INSTANCE_PROTOCOL
(
    MIDDLEWARE_INSTANCE_ID BIGINT NOT NULL COMMENT '',
    MIDDLEWARE_INSTANCE_SERVICE_PORT INTEGER NOT NULL COMMENT '',
    PROTOCOL             VARCHAR(100) NULL COMMENT '',
    PRIMARY KEY (MIDDLEWARE_INSTANCE_ID,MIDDLEWARE_INSTANCE_SERVICE_PORT)
);



CREATE INDEX _MIDDLEWARE_INSTANCE_PROTOCOL_1 ON MIDDLEWARE_INSTANCE_PROTOCOL
    (
     MIDDLEWARE_INSTANCE_ID
        );



CREATE TABLE MIDDLEWARE_MASTER
(
    MIDDLEWARE_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    MIDDLEWARE_TYPE_CODE VARCHAR(8) NOT NULL COMMENT '',
    ENGINE_INSTALLATION_PATH VARCHAR(512) NULL COMMENT '',
    DOMAIN_HOME_PATH     VARCHAR(512) NULL COMMENT '',
    AUTOMATIC_REGIST_PROTECTION_YN VARCHAR(1) NOT NULL COMMENT '',
    VENDOR_NAME          VARCHAR(100) NULL COMMENT '',
    ENGINE_VERSION       VARCHAR(100) NULL COMMENT '',
    CONFIG_FILE_PATH     VARCHAR(512) NULL COMMENT '',
    PROCESS_NAME         VARCHAR(50) NULL COMMENT '',
    JAVA_VERSION         VARCHAR(200) NULL COMMENT '',
    DEDICATED_AUTHENTICATION_YN VARCHAR(1) NOT NULL COMMENT '',
    JAVA_VENDOR          VARCHAR(200) NULL COMMENT '',
    PRIMARY KEY (MIDDLEWARE_INVENTORY_ID)
);



CREATE UNIQUE INDEX MW_MST_FK01 ON MIDDLEWARE_MASTER
    (
     MIDDLEWARE_INVENTORY_ID
        );



CREATE TABLE MIDDLEWARE_SUMMARY
(
    MIDDLEWARE_INVENTORY_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (MIDDLEWARE_INVENTORY_ID)
);



CREATE UNIQUE INDEX MW_SMRY_FK01 ON MIDDLEWARE_SUMMARY
    (
     MIDDLEWARE_INVENTORY_ID
        );



CREATE TABLE MIGRATION_PRE_CONFIG
(
    MIGRATION_PRE_CONFIG_ID BIGINT AUTO_INCREMENT COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    CONFIG_NAME          VARCHAR(100) NOT NULL COMMENT '',
    REGION               VARCHAR(100) NULL COMMENT '',
    GCP_PROJECT_ID       VARCHAR(200) NULL COMMENT '',
    IMAGE_ID             VARCHAR(200) NULL COMMENT '',
    CONNECT_IP_ADDRESS   VARCHAR(100) NULL COMMENT '',
    CONNECT_SSH_PORT     INTEGER NOT NULL COMMENT '',
    CONNECT_USER_NAME    VARCHAR(500) NOT NULL COMMENT '',
    CONNECT_USER_PASSWORD VARCHAR(512) NULL COMMENT '',
    KEY_PAIR             VARCHAR(200) NULL COMMENT '',
    PUB_KEY              VARCHAR(1024) NULL COMMENT '',
    KEY_FILE_NAME        VARCHAR(200) NULL COMMENT '',
    KEY_FILE_PATH        VARCHAR(200) NULL COMMENT '',
    PACKAGES             VARCHAR(512) NULL COMMENT '',
    INIT_SCRIPT          LONGTEXT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NULL COMMENT '삭제여부 [101]',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    CREDENTIAL_ID        BIGINT NULL COMMENT '',
    PRIMARY KEY (MIGRATION_PRE_CONFIG_ID)
);



CREATE INDEX _MIGRATION_PRE_CONFIG_2 ON MIGRATION_PRE_CONFIG
    (
     CREDENTIAL_ID
        );



CREATE INDEX MIG_PRE_CNFG_FK01 ON MIGRATION_PRE_CONFIG
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE MIGRATION_PRE_CONFIG_FILE
(
    MIGRATION_PRE_CONFIG_ID BIGINT NOT NULL COMMENT '',
    SEQUENCE             INTEGER NOT NULL COMMENT '',
    SOURCE               VARCHAR(200) NOT NULL COMMENT '',
    TARGET               VARCHAR(512) NULL COMMENT '',
    TYPE                 VARCHAR(200) NOT NULL COMMENT '',
    SIZE                 BIGINT NULL COMMENT '',
    OWNER_GROUP          VARCHAR(512) NULL COMMENT '',
    OWNER_USER           VARCHAR(512) NULL COMMENT '',
    PRIMARY KEY (MIGRATION_PRE_CONFIG_ID,SEQUENCE)
);



CREATE INDEX _MIGRATION_PRE_CONFIG_FILE_1 ON MIGRATION_PRE_CONFIG_FILE
    (
     MIGRATION_PRE_CONFIG_ID
        );



CREATE TABLE MIGRATION_PRE_CONFIG_GROUP
(
    MIGRATION_PRE_CONFIG_ID BIGINT NOT NULL COMMENT '',
    GID                  INTEGER NOT NULL COMMENT '',
    GROUP_NAME           VARCHAR(200) NOT NULL COMMENT '',
    PRIMARY KEY (MIGRATION_PRE_CONFIG_ID,GID)
);



CREATE INDEX _MIGRATION_PRE_CONFIG_GROUP_1 ON MIGRATION_PRE_CONFIG_GROUP
    (
     MIGRATION_PRE_CONFIG_ID
        );



CREATE TABLE MIGRATION_PRE_CONFIG_USER
(
    MIGRATION_PRE_CONFIG_ID BIGINT NOT NULL COMMENT '',
    UID                  INTEGER NOT NULL COMMENT '',
    USER_NAME            VARCHAR(200) NULL COMMENT '',
    GROUPS               VARCHAR(512) NULL COMMENT '',
    USER_PASSWORD        VARCHAR(512) NULL COMMENT '',
    HOME_DIR             VARCHAR(512) NULL COMMENT '',
    PROFILE              LONGTEXT NULL COMMENT '',
    CRONTAB              LONGTEXT NULL COMMENT '',
    PRIMARY KEY (MIGRATION_PRE_CONFIG_ID,UID)
);



CREATE INDEX _MIGRATION_PRE_CONFIG_USER_1 ON MIGRATION_PRE_CONFIG_USER
    (
     MIGRATION_PRE_CONFIG_ID
        );



CREATE TABLE NETWORK_FILTER_MASTER
(
    NETWORK_FILTER_ID    BIGINT AUTO_INCREMENT COMMENT '',
    NETWORK_FILTER_NAME  VARCHAR(100) NOT NULL COMMENT '',
    DESCRIPTION          VARCHAR(512) NULL COMMENT '',
    WHITELIST            LONGTEXT NULL COMMENT '',
    BLACKLIST            LONGTEXT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (NETWORK_FILTER_ID)
);



CREATE INDEX _NETWORK_FILTER_MASTER_1 ON NETWORK_FILTER_MASTER
    (
     PROJECT_ID
        );



CREATE TABLE POSTS
(
    POST_ID              BIGINT AUTO_INCREMENT COMMENT '',
    BBS_META_CODE        INTEGER NOT NULL COMMENT '',
    GRP_POST_SEQ         BIGINT NOT NULL COMMENT '',
    POST_LEVEL           INTEGER NOT NULL COMMENT '',
    POST_STEP            INTEGER NOT NULL COMMENT '',
    POST_PASSWORD        VARCHAR(20) NULL COMMENT '',
    POST_TITLE           VARCHAR(200) NOT NULL COMMENT '',
    POST_CONTENT         TEXT NULL COMMENT '',
    POST_CONTENT_TXT     VARCHAR(4000) NULL COMMENT '',
    POST_READ_COUNT      INTEGER NOT NULL COMMENT '',
    POST_SERVICE_YN      VARCHAR(1) NOT NULL COMMENT '',
    POST_DELETE_YN       VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (POST_ID)
);



CREATE INDEX POSTS_FK01 ON POSTS
    (
     BBS_META_CODE
        );



CREATE INDEX POSTS_FK02 ON POSTS
    (
     GRP_POST_SEQ
        );



CREATE TABLE POSTS_ATTACH_FILE
(
    POST_ID              BIGINT NOT NULL COMMENT '',
    ATTACH_FILE_ID       BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (POST_ID,ATTACH_FILE_ID)
);



CREATE INDEX POSTS_ATCH_FILE_FK01 ON POSTS_ATTACH_FILE
    (
     POST_ID
        );



CREATE INDEX POSTS_ATCH_FILE_FK02 ON POSTS_ATTACH_FILE
    (
     ATTACH_FILE_ID
        );



CREATE TABLE POSTS_POPUP
(
    POST_ID              BIGINT NOT NULL COMMENT '',
    POPUP_YN             VARCHAR(1) NOT NULL COMMENT '',
    PUB_SDT              VARCHAR(8) NOT NULL COMMENT '',
    PUB_EDT              VARCHAR(8) NOT NULL COMMENT '',
    PRIMARY KEY (POST_ID)
);



CREATE INDEX POSTS_POPUP_IX01 ON POSTS_POPUP
    (
     POPUP_YN,
     PUB_SDT,
     PUB_EDT
        );



CREATE UNIQUE INDEX POSTS_POPUP_FK01 ON POSTS_POPUP
    (
     POST_ID
        );



CREATE TABLE POSTS_ROLE
(
    POST_ID              BIGINT NOT NULL COMMENT '',
    ROLE_NUMBER          INTEGER NOT NULL COMMENT '',
    ROLE_EXCEPT_INCLUDE_CODE VARCHAR(6) NOT NULL COMMENT '',
    PRIMARY KEY (POST_ID,ROLE_NUMBER)
);



CREATE INDEX POSTS_ROLE_FK01 ON POSTS_ROLE
    (
     ROLE_NUMBER
        );



CREATE INDEX POSTS_ROLE_FK02 ON POSTS_ROLE
    (
     POST_ID
        );



CREATE TABLE PRODUCT_LIFECYCLE_RULES
(
    PRODUCT_LIFECYCLE_RULES_ID BIGINT AUTO_INCREMENT COMMENT '',
    SOLUTION_TYPE        VARCHAR(100) NOT NULL COMMENT '',
    SOLUTION_NAME        VARCHAR(100) NOT NULL COMMENT '',
    VENDOR               VARCHAR(100) NOT NULL COMMENT '',
    OPENSOURCE_YN        VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (PRODUCT_LIFECYCLE_RULES_ID)
);



CREATE TABLE PRODUCT_LIFECYCLE_RULES_VERSION
(
    PRODUCT_LIFECYCLE_RULES_VERSION_ID BIGINT AUTO_INCREMENT COMMENT '',
    VERSION              VARCHAR(100) NOT NULL COMMENT '',
    GA_DATETIME          DATETIME NULL COMMENT '',
    EOL_DATETIME         DATETIME NULL COMMENT '',
    EOS_DATETIME         DATETIME NULL COMMENT '',
    PRODUCT_LIFECYCLE_RULES_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (PRODUCT_LIFECYCLE_RULES_VERSION_ID)
);



CREATE INDEX _PRODUCT_LIFECYCLE_RULES_VERSION_1 ON PRODUCT_LIFECYCLE_RULES_VERSION
    (
     PRODUCT_LIFECYCLE_RULES_ID
        );



CREATE TABLE PROGRAM
(
    PROGRAM_ID           VARCHAR(100) NOT NULL COMMENT '',
    PROGRAM_NAME         VARCHAR(100) NOT NULL COMMENT '',
    PROGRAM_DESCRIPTION  VARCHAR(1000) NULL COMMENT '',
    PROGRAM_DISPLAY_NUMBER INTEGER NOT NULL COMMENT '',
    PROGRAM_VALID_YN     VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (PROGRAM_ID)
);



CREATE INDEX PRGM_IX01 ON PROGRAM
    (
     PROGRAM_ID,
     PROGRAM_VALID_YN,
     PROGRAM_DISPLAY_NUMBER
        );



CREATE TABLE PROJECT_MASTER
(
    PROJECT_ID           BIGINT AUTO_INCREMENT COMMENT '',
    PROJECT_NAME         VARCHAR(100) NOT NULL COMMENT '',
    PROJECT_TYPE_CODE    VARCHAR(8) NOT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    DESCRIPTION          VARCHAR(500) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (PROJECT_ID)
);



CREATE TABLE QUESTION
(
    QUESTION_ID          BIGINT AUTO_INCREMENT COMMENT '',
    SURVEY_CATEGORY_ID   BIGINT NOT NULL COMMENT '',
    QUESTION_CONTENT_ENGLISH VARCHAR(1024) NULL COMMENT '',
    QUESTION_CONTENT_KOREAN VARCHAR(1024) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (QUESTION_ID)
);



CREATE INDEX _QUESTION_1 ON QUESTION
    (
     SURVEY_CATEGORY_ID
        );



CREATE TABLE QUESTION_ANSWER
(
    QUESTION_ID          BIGINT NOT NULL COMMENT '',
    ANSWER_ID            BIGINT NOT NULL COMMENT '',
    DISPLAY_ORDER        INTEGER NULL COMMENT '',
    SCORE                INTEGER NULL COMMENT '',
    PRIMARY KEY (QUESTION_ID,ANSWER_ID)
);



CREATE INDEX _QUESTION_ANSWER_1 ON QUESTION_ANSWER
    (
     QUESTION_ID
        );



CREATE INDEX _QUESTION_ANSWER_2 ON QUESTION_ANSWER
    (
     ANSWER_ID
        );



CREATE TABLE ROLE_EXTINCTION_MAPPING
(
    BASE_ROLE_NUMBER     INTEGER NOT NULL COMMENT '',
    EXTINCTION_ROLE_NUMBER INTEGER NOT NULL COMMENT '',
    PRIMARY KEY (BASE_ROLE_NUMBER,EXTINCTION_ROLE_NUMBER)
);



CREATE INDEX ROLE_EXT_MAP_FK01 ON ROLE_EXTINCTION_MAPPING
    (
     BASE_ROLE_NUMBER
        );



CREATE INDEX ROLE_EXT_MAP_FK02 ON ROLE_EXTINCTION_MAPPING
    (
     EXTINCTION_ROLE_NUMBER
        );



CREATE TABLE ROLE_MASTER
(
    ROLE_NUMBER          INTEGER NOT NULL COMMENT '',
    SYSTEM_TYPE_CODE     VARCHAR(6) NOT NULL COMMENT '',
    PARENT_SYSTEM_TYPE_CODE VARCHAR(6) NOT NULL COMMENT '',
    ROLE_NAME            VARCHAR(100) NOT NULL COMMENT '',
    MAIN_PAGE_URL        VARCHAR(200) NULL COMMENT '',
    ROLE_DESCRIPTION     VARCHAR(1000) NULL COMMENT '',
    ROLE_USAGE_YN        VARCHAR(1) NOT NULL COMMENT '',
    ROLE_ADMIN_YN        VARCHAR(1) NULL COMMENT '',
    ROLE_DISPLAY_NUMBER  INTEGER NULL COMMENT '',
    PRIMARY KEY (ROLE_NUMBER)
);



CREATE INDEX ROLE_MST_IX01 ON ROLE_MASTER
    (
     SYSTEM_TYPE_CODE,
     ROLE_NUMBER,
     ROLE_USAGE_YN
        );



CREATE TABLE ROLE_PRGM
(
    ROLE_NUMBER          INTEGER NOT NULL COMMENT '',
    PROGRAM_ID           VARCHAR(100) NOT NULL COMMENT '',
    ROLE_PROGRAM_REGIST_YN VARCHAR(1) NOT NULL COMMENT '',
    ROLE_PROGRAM_INQUIRY_YN VARCHAR(1) NOT NULL COMMENT '',
    ROLE_PROGRAM_MODIFY_YN VARCHAR(1) NOT NULL COMMENT '',
    ROLE_PROGRAM_DELETE_YN VARCHAR(1) NOT NULL COMMENT '',
    ROLE_PROGRAM_FILE_YN VARCHAR(1) NOT NULL COMMENT '',
    ROLE_PROGRAM_ADMIN_YN VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (ROLE_NUMBER,PROGRAM_ID)
);



CREATE INDEX ROLE_PRGM_FK01 ON ROLE_PRGM
    (
     ROLE_NUMBER
        );



CREATE INDEX ROLE_PRGM_FK02 ON ROLE_PRGM
    (
     PROGRAM_ID
        );



CREATE TABLE SERVER_DAEMON
(
    SERVER_DAEMON_ID     BIGINT AUTO_INCREMENT COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    DAEMON_NAME          VARCHAR(100) NOT NULL COMMENT '',
    DAEMON_DESCRIPTION   VARCHAR(512) NULL COMMENT '',
    DAEMON_START_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    DAEMON_STATUS        VARCHAR(8) NOT NULL COMMENT '',
    PRIMARY KEY (SERVER_DAEMON_ID)
);



CREATE INDEX SVR_DAEMON_FK01 ON SERVER_DAEMON
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_DISK_INFORMATION
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    DEVICE_NAME          VARCHAR(200) NOT NULL COMMENT '',
    FREE_SIZE            FLOAT NULL COMMENT '',
    FILESYSTEM_TYPE      VARCHAR(20) NULL COMMENT '',
    TOTAL_SIZE           FLOAT NULL COMMENT '',
    MOUNT_PATH           VARCHAR(512) NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID,DEVICE_NAME)
);



CREATE INDEX _SERVER_DISK_INFORMATION_1 ON SERVER_DISK_INFORMATION
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_MASTER
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    MIGRATION_TYPE_CODE  VARCHAR(8) NULL COMMENT '',
    OS_VERSION           VARCHAR(20) NULL COMMENT '',
    WINDOWS_YN           VARCHAR(1) NOT NULL COMMENT '',
    REPRESENTATIVE_IP_ADDRESS VARCHAR(100) NULL COMMENT '',
    CONNECTION_PORT      INTEGER NULL COMMENT '',
    SERVER_LOCATION      VARCHAR(50) NULL COMMENT '',
    SERVER_USAGE_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    HYPERVISOR_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    DUALIZATION_TYPE_CODE VARCHAR(8) NULL COMMENT '',
    ACCESS_CONTROL_SYSTEM_SOLUTION_NAME VARCHAR(100) NOT NULL COMMENT '',
    TPMC                 FLOAT NULL COMMENT '',
    BUY_DATE             VARCHAR(8) NULL COMMENT '',
    MAKER_NAME           VARCHAR(100) NOT NULL COMMENT '',
    MODEL_NAME           VARCHAR(100) NOT NULL COMMENT '',
    SERIAL_NUMBER        VARCHAR(100) NOT NULL COMMENT '',
    MONITORING_YN        VARCHAR(1) NOT NULL COMMENT '',
    MONITORING_CYCLE     VARCHAR(200) NULL COMMENT 'cron 형',
    MONITORING_START_DATETIME DATETIME NULL COMMENT '',
    MONITORING_END_DATETIME DATETIME NULL COMMENT '',
    AUTOMATIC_ANALYSIS_YN VARCHAR(1) NOT NULL COMMENT '',
    DISCOVERED_SERVER_YN VARCHAR(1) NOT NULL COMMENT '',
    SCHEDULED_ASSESSMENT_YN VARCHAR(1) NOT NULL COMMENT '',
    ENABLE_SU_YN         VARCHAR(1) NOT NULL COMMENT '',
    ROOT_PASSWORD        VARCHAR(512) NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID)
);



CREATE UNIQUE INDEX SVR_MST_FK01 ON SERVER_MASTER
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_NETWORK_INFORMATION
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    ADDRESS              VARCHAR(100) NOT NULL COMMENT '',
    INTERFACE_NAME       VARCHAR(200) NULL COMMENT '',
    GATEWAY              VARCHAR(20) NULL COMMENT '',
    MAC_ADDRESS          VARCHAR(100) NULL COMMENT '',
    NETWORK_SCRIPT       VARCHAR(4096) NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID,ADDRESS)
);



CREATE INDEX _SERVER_NETWORK_INFORMATION_1 ON SERVER_NETWORK_INFORMATION
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_STATUS
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    SERVER_TYPE          VARCHAR(20) NULL COMMENT '',
    MANUFACTURER         VARCHAR(100) NULL COMMENT '',
    MODEL                VARCHAR(100) NULL COMMENT '',
    DISK_SIZE            BIGINT NULL COMMENT '',
    DISK_COUNT           INTEGER NULL COMMENT '',
    DISK_USED            BIGINT NULL COMMENT '',
    CPU_USAGE            FLOAT NULL COMMENT '',
    MEM_USAGE            FLOAT NULL COMMENT '',
    MONITORING_DATETIME  DATETIME NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID)
);



CREATE UNIQUE INDEX _SERVER_STATUS_1 ON SERVER_STATUS
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_STORAGE
(
    SERVER_STORAGE_ID    BIGINT AUTO_INCREMENT COMMENT '',
    MANUFACTURER         VARCHAR(100) NULL COMMENT '',
    MODEL                VARCHAR(100) NULL COMMENT '',
    DISK_TYPE            VARCHAR(20) NULL COMMENT '',
    CONNECTION_TYPE      VARCHAR(20) NULL COMMENT '',
    SHARING_YN           VARCHAR(1) NULL COMMENT '',
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (SERVER_STORAGE_ID)
);



CREATE INDEX _SERVER_STORAGE_1 ON SERVER_STORAGE
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVER_SUMMARY
(
    SERVER_INVENTORY_ID  BIGINT NOT NULL COMMENT '',
    HOST_NAME            VARCHAR(100) NULL COMMENT '',
    VENDOR_NAME          VARCHAR(100) NULL COMMENT '',
    CPU_COUNT            INTEGER NULL COMMENT '',
    CPU_CORE_COUNT       INTEGER NULL COMMENT '',
    CPU_SOCKET_COUNT     INTEGER NULL COMMENT '',
    CPU_ARCHITECTURE     VARCHAR(100) NULL COMMENT '',
    OS_KERNEL            VARCHAR(100) NULL COMMENT '',
    OS_NAME              VARCHAR(100) NULL COMMENT '',
    OS_ALIAS             VARCHAR(100) NULL COMMENT '',
    OS_VERSION           VARCHAR(100) NULL COMMENT '',
    OS_FAMILY            VARCHAR(100) NOT NULL COMMENT '',
    MEM_SIZE             INTEGER NULL COMMENT '',
    SWAP_SIZE            INTEGER NULL COMMENT '',
    USER_GROUP_CONFIG_JSON VARCHAR(200) NULL COMMENT '',
    CPU_MODEL            VARCHAR(200) NULL COMMENT '',
    PRIMARY KEY (SERVER_INVENTORY_ID)
);



CREATE UNIQUE INDEX SVR_SMRY_FK01 ON SERVER_SUMMARY
    (
     SERVER_INVENTORY_ID
        );



CREATE TABLE SERVICE_INVENTORY
(
    INVENTORY_ID         BIGINT NOT NULL COMMENT '',
    SERVICE_ID           BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (INVENTORY_ID,SERVICE_ID)
);



CREATE INDEX _SERVICE_INVENTORY_3 ON SERVICE_INVENTORY
    (
     SERVICE_ID
        );



CREATE INDEX SERV_INV_FK02 ON SERVICE_INVENTORY
    (
     INVENTORY_ID
        );



CREATE TABLE SERVICE_LABEL
(
    LABEL_ID             BIGINT NOT NULL COMMENT '',
    SERVICE_ID           BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (LABEL_ID,SERVICE_ID)
);



CREATE INDEX SERV_LBL_FK01 ON SERVICE_LABEL
    (
     LABEL_ID
        );



CREATE INDEX _SERVICE_LABEL_2 ON SERVICE_LABEL
    (
     SERVICE_ID
        );



CREATE TABLE SERVICE_MANAGER
(
    USER_ID              BIGINT NOT NULL COMMENT '',
    MANAGER_TYPE_CODE    VARCHAR(20) NOT NULL COMMENT '',
    SERVICE_ID           BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (USER_ID,MANAGER_TYPE_CODE,SERVICE_ID)
);



CREATE INDEX SERV_MGR_FK02 ON SERVICE_MANAGER
    (
     USER_ID
        );



CREATE INDEX _SERVICE_MANAGER_4 ON SERVICE_MANAGER
    (
     SERVICE_ID
        );



CREATE TABLE SERVICE_MASTER
(
    SERVICE_ID           BIGINT AUTO_INCREMENT COMMENT '',
    SERVICE_NAME         VARCHAR(100) NOT NULL COMMENT '',
    BUSINESS_CATEGORY_CODE VARCHAR(100) NOT NULL COMMENT '',
    BUSINESS_CATEGORY_NAME VARCHAR(100) NOT NULL COMMENT '',
    CUSTOMER_SERVICE_CODE VARCHAR(20) NOT NULL COMMENT '',
    CUSTOMER_SERVICE_NAME VARCHAR(100) NOT NULL COMMENT '',
    MIGRATION_TARGET_YN  VARCHAR(1) NOT NULL COMMENT '',
    MIGRATION_MAN_MONTH  FLOAT NULL COMMENT '',
    MIGRATION_ENV_CONFIG_START_DATETIME DATETIME NULL COMMENT '',
    MIGRATION_ENV_CONFIG_END_DATETIME DATETIME NULL COMMENT '',
    MIGRATION_TEST_START_DATETIME DATETIME NULL COMMENT '',
    MIGRATION_TEST_END_DATETIME DATETIME NULL COMMENT '',
    MIGRATION_CUT_OVER_DATETIME DATETIME NULL COMMENT '',
    SEVERITY             VARCHAR(8) NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    DESCRIPTION          VARCHAR(500) NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (SERVICE_ID)
);



CREATE INDEX _SERVICE_MASTER_1 ON SERVICE_MASTER
    (
     PROJECT_ID
        );



CREATE TABLE SETTING
(
    SETTING_ID           BIGINT AUTO_INCREMENT COMMENT '',
    PARENT_SETTING_ID    BIGINT NULL COMMENT '',
    CATEGORY_NAME        VARCHAR(100) NOT NULL COMMENT '',
    PROPERTY_NAME        VARCHAR(100) NULL COMMENT '',
    PROPERTY_ALIAS_KOR   VARCHAR(100) NULL COMMENT '',
    PROPERTY_ALIAS_ENG   VARCHAR(100) NULL COMMENT '',
    PROPERTY_VALUE       VARCHAR(500) NULL COMMENT '',
    READ_ONLY_YN         VARCHAR(1) NULL COMMENT '',
    DATA_TYPE            VARCHAR(100) NULL COMMENT '',
    DATA_VALUES          VARCHAR(100) NULL COMMENT '',
    PLACEHOLDER_ENG      VARCHAR(100) NULL COMMENT '',
    PLACEHOLDER_KOR      VARCHAR(100) NULL COMMENT '',
    TOOLTIP_ENG          VARCHAR(300) NULL COMMENT '',
    TOOLTIP_KOR          VARCHAR(300) NULL COMMENT '',
    DISPLAY_ORDER        BIGINT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (SETTING_ID)
);



CREATE TABLE SURVEY
(
    SURVEY_ID            BIGINT AUTO_INCREMENT COMMENT '',
    SURVEY_NAME_ENGLISH  VARCHAR(512) NULL COMMENT '',
    SURVEY_NAME_KOREAN   VARCHAR(512) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (SURVEY_ID)
);



CREATE TABLE SURVEY_CATEGORY
(
    SURVEY_CATEGORY_ID   BIGINT AUTO_INCREMENT COMMENT '',
    PARENT_SURVEY_CATEGORY_ID BIGINT NULL COMMENT '',
    CATEGORY_STEP        INTEGER NULL COMMENT '',
    CATEGORY_NAME_ENGLISH VARCHAR(512) NULL COMMENT '',
    CATEGORY_NAME_KOREAN VARCHAR(512) NULL COMMENT '',
    EVALUATION_ITEM_ENGLISH VARCHAR(512) NULL COMMENT '',
    EVALUATION_ITEM_KOREAN VARCHAR(512) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (SURVEY_CATEGORY_ID)
);



CREATE INDEX _SURVEY_CATEGORY_1 ON SURVEY_CATEGORY
    (
     SURVEY_CATEGORY_ID
        );



CREATE TABLE SURVEY_PROCESS
(
    SURVEY_PROCESS_ID    BIGINT AUTO_INCREMENT COMMENT '',
    SURVEY_ID            BIGINT NOT NULL COMMENT '',
    SERVICE_ID           BIGINT NULL COMMENT '',
    SURVEY_PROCESS_RESULT_CODE VARCHAR(20) NULL COMMENT '',
    PPT_FILE_NAME        VARCHAR(512) NULL COMMENT '',
    PPT_FILE_PATH        VARCHAR(1024) NULL COMMENT '',
    EXCEL_FILE_NAME      VARCHAR(512) NULL COMMENT '',
    EXCEL_FILE_PATH      VARCHAR(1024) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (SURVEY_PROCESS_ID)
);



CREATE INDEX _SURVEY_PROCESS_1 ON SURVEY_PROCESS
    (
     SERVICE_ID
        );



CREATE INDEX _SURVEY_PROCESS_2 ON SURVEY_PROCESS
    (
     SURVEY_ID
        );



CREATE TABLE SURVEY_QUESTION
(
    SURVEY_ID            BIGINT NOT NULL COMMENT '',
    QUESTION_ID          BIGINT NOT NULL COMMENT '',
    DISPLAY_ORDER        INTEGER NULL COMMENT '',
    WEIGHT               FLOAT NULL COMMENT '가중치',
    PRIMARY KEY (SURVEY_ID,QUESTION_ID)
);



CREATE INDEX _SURVEY_QUESTION_1 ON SURVEY_QUESTION
    (
     SURVEY_ID
        );



CREATE INDEX _SURVEY_QUESTION_2 ON SURVEY_QUESTION
    (
     QUESTION_ID
        );



CREATE TABLE SURVEY_USER_ANSWER
(
    ANSWER_ID            BIGINT NOT NULL COMMENT '',
    SURVEY_ID            BIGINT NOT NULL COMMENT '',
    QUESTION_ID          BIGINT NOT NULL COMMENT '',
    SURVEY_PROCESS_ID    BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (ANSWER_ID,SURVEY_ID,QUESTION_ID,SURVEY_PROCESS_ID)
);



CREATE INDEX _SURVEY_USER_ANSWER_3 ON SURVEY_USER_ANSWER
    (
     ANSWER_ID
        );



CREATE INDEX _SURVEY_USER_ANSWER_4 ON SURVEY_USER_ANSWER
    (
     SURVEY_PROCESS_ID
        );



CREATE INDEX _SURVEY_USER_ANSWER_5 ON SURVEY_USER_ANSWER
    (
     SURVEY_ID,
     QUESTION_ID
        );



CREATE TABLE THIRD_PARTY_SEARCH_TYPE
(
    THIRD_PARTY_SEARCH_TYPE_ID BIGINT AUTO_INCREMENT COMMENT '',
    THIRD_PARTY_SOLUTION_ID BIGINT NOT NULL COMMENT '',
    SEARCH_TYPE          VARCHAR(8) NOT NULL COMMENT '',
    SEARCH_VALUE         VARCHAR(100) NOT NULL COMMENT '',
    INVENTORY_TYPE_CODE  VARCHAR(8) NULL COMMENT '',
    WINDOWS_YN           VARCHAR(1) NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    PRIMARY KEY (THIRD_PARTY_SEARCH_TYPE_ID)
);



CREATE INDEX _THIRD_PARTY_SEARCH_TYPE_1 ON THIRD_PARTY_SEARCH_TYPE
    (
     THIRD_PARTY_SOLUTION_ID
        );



CREATE TABLE THIRD_PARTY_SOLUTION
(
    THIRD_PARTY_SOLUTION_ID BIGINT AUTO_INCREMENT COMMENT '',
    THIRD_PARTY_SOLUTION_NAME VARCHAR(100) NOT NULL COMMENT '',
    VENDOR               VARCHAR(100) NULL COMMENT '',
    DESCRIPTION          VARCHAR(1000) NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (THIRD_PARTY_SOLUTION_ID)
);



CREATE TABLE TOPOLOGY_NODE_POSITION
(
    TYPE                 VARCHAR(20) NOT NULL COMMENT '',
    TYPE_ID              BIGINT NOT NULL COMMENT '',
    CONFIG_CONTENTS      LONGTEXT NULL COMMENT '',
    USER_ID              BIGINT NULL COMMENT '',
    PRIMARY KEY (TYPE,TYPE_ID)
);



CREATE INDEX _TOPOLOGY_NODE_POSITION_1 ON TOPOLOGY_NODE_POSITION
    (
     USER_ID
        );



CREATE TABLE TRACKING_INFO
(
    TRACKING_INFO_ID     BIGINT AUTO_INCREMENT COMMENT '',
    TRACKING_KEY         VARCHAR(1024) NULL COMMENT '',
    CONTENT              LONGTEXT NULL COMMENT '',
    INVENTORY_PROCESS_ID BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (TRACKING_INFO_ID)
);



CREATE INDEX _TRACKING_INFO_1 ON TRACKING_INFO
    (
     INVENTORY_PROCESS_ID
        );



CREATE TABLE UPLOAD_INVENTORY
(
    UPLOAD_INVENTORY_ID  BIGINT AUTO_INCREMENT COMMENT '',
    FILE_NAME            VARCHAR(100) NOT NULL COMMENT '',
    FILE_PATH            VARCHAR(200) NOT NULL COMMENT '',
    UPLOAD_STATUS_TYPE_CODE VARCHAR(8) NOT NULL COMMENT '',
    UPLOAD_PROCESS_RESULT_TXT VARCHAR(4000) NULL COMMENT '',
    SERVICE_COUNT        INTEGER NOT NULL COMMENT '',
    SERVER_COUNT         INTEGER NOT NULL COMMENT '',
    MIDDLEWARE_COUNT     INTEGER NOT NULL COMMENT '',
    APPLICATION_COUNT    INTEGER NOT NULL COMMENT '',
    DBMS_COUNT           INTEGER NOT NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (UPLOAD_INVENTORY_ID)
);



CREATE INDEX _UPLOAD_INVENTORY_1 ON UPLOAD_INVENTORY
    (
     PROJECT_ID
        );



CREATE TABLE USER_ACCESS
(
    USER_ID              BIGINT NOT NULL COMMENT '',
    USER_LOGIN_ID        VARCHAR(20) NOT NULL COMMENT '',
    USER_LOGIN_PASSWORD  VARCHAR(200) NOT NULL COMMENT '',
    USER_STATUS_CODE     VARCHAR(6) NOT NULL COMMENT '',
    USER_PASSWORD_MODIFY_DATETIME DATE NOT NULL COMMENT '',
    TEMP_PASSWORD_YN     VARCHAR(1) NULL COMMENT '',
    BLOCK_YN             VARCHAR(1) NOT NULL DEFAULT 'N' COMMENT '',
    LOGIN_FAIL_CNT       INTEGER NULL DEFAULT 0 COMMENT '',
    LAST_LOGIN_DATETIME  DATETIME NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (USER_ID)
);



CREATE UNIQUE INDEX USR_ACC_UI01 ON USER_ACCESS
    (
     USER_LOGIN_ID
        );



CREATE UNIQUE INDEX USR_ACC_FK01 ON USER_ACCESS
    (
     USER_ID
        );



CREATE TABLE USER_CONFIG
(
    USER_CONFIG_ID       BIGINT AUTO_INCREMENT COMMENT '',
    USER_ID              BIGINT NOT NULL COMMENT '',
    PROPERTY             VARCHAR(50) NULL COMMENT '',
    CONFIG_VALUE         VARCHAR(1024) NULL COMMENT '',
    DELETE_YN            VARCHAR(1) NOT NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PROJECT_ID           BIGINT NULL COMMENT '',
    PRIMARY KEY (USER_CONFIG_ID,USER_ID)
);



CREATE INDEX USR_CNFG_FK01 ON USER_CONFIG
    (
     USER_ID
        );



CREATE INDEX _USER_CONFIG_2 ON USER_CONFIG
    (
     PROJECT_ID
        );



CREATE TABLE USER_LOGIN_HISTORY
(
    USER_LOGIN_HISTORY_ID BIGINT AUTO_INCREMENT COMMENT '',
    USER_ID              BIGINT NULL COMMENT '',
    LOGIN_SYSTEM_TYPE_CODE VARCHAR(6) NOT NULL COMMENT '',
    USER_LOGIN_DATETIME  DATE NOT NULL COMMENT '',
    USER_LOGIN_IP        VARCHAR(15) NOT NULL COMMENT '',
    PRIMARY KEY (USER_LOGIN_HISTORY_ID)
);



CREATE INDEX USR_LOGIN_HIS_FK01 ON USER_LOGIN_HISTORY
    (
     USER_ID
        );



CREATE TABLE USER_MASTER
(
    USER_ID              BIGINT AUTO_INCREMENT COMMENT '',
    USER_COMPANY_CODE    VARCHAR(8) NOT NULL COMMENT '',
    USER_NAME_KOREAN     VARCHAR(100) NULL COMMENT '',
    USER_NAME_ENGLISH    VARCHAR(100) NULL COMMENT '',
    USER_EMAIL           VARCHAR(100) NOT NULL COMMENT '',
    USER_PHONE           VARCHAR(30) NULL COMMENT '',
    USER_MOBILE          VARCHAR(30) NULL COMMENT '',
    USER_FAX             VARCHAR(30) NULL COMMENT '',
    USER_JOB_GRADE       VARCHAR(100) NULL COMMENT '',
    USER_DEPARTMENT      VARCHAR(100) NULL COMMENT '',
    USER_REMARKS         VARCHAR(1000) NULL COMMENT '',
    REGIST_USER_ID       BIGINT NOT NULL COMMENT '',
    REGIST_DATETIME      DATETIME NOT NULL COMMENT '',
    MODIFY_USER_ID       BIGINT NOT NULL COMMENT '',
    MODIFY_DATETIME      DATETIME NOT NULL COMMENT '',
    PRIMARY KEY (USER_ID)
);



CREATE INDEX USR_MST_FK01 ON USER_MASTER
    (
     USER_COMPANY_CODE
        );



CREATE TABLE USER_NETWORK_FILTER
(
    USER_ID              BIGINT NOT NULL COMMENT '',
    RESOURCE_TYPE_CODE   VARCHAR(8) NOT NULL COMMENT '',
    RESOURCE_ID          BIGINT NOT NULL COMMENT '',
    WHITELIST            LONGTEXT NULL COMMENT '',
    BLACKLIST            LONGTEXT NULL COMMENT '',
    HIDE_NODES           LONGTEXT NULL COMMENT '',
    NETWORK_FILTER_ID    BIGINT NOT NULL COMMENT '',
    PRIMARY KEY (USER_ID,RESOURCE_TYPE_CODE,RESOURCE_ID)
);



CREATE INDEX USR_NET_FL_FK01 ON USER_NETWORK_FILTER
    (
     NETWORK_FILTER_ID
        );



CREATE INDEX USR_NET_FL_FK02 ON USER_NETWORK_FILTER
    (
     USER_ID
        );



CREATE TABLE USER_ROLE
(
    USER_ID              BIGINT NOT NULL COMMENT '',
    ROLE_NUMBER          INTEGER NOT NULL COMMENT '',
    USER_ROLE_STATUS_CODE VARCHAR(6) NOT NULL COMMENT '',
    PRIMARY KEY (USER_ID,ROLE_NUMBER)
);



CREATE INDEX USR_ROLE_FK02 ON USER_ROLE
    (
     ROLE_NUMBER
        );



CREATE INDEX USR_ROLE_FK01 ON USER_ROLE
    (
     USER_ID
        );



create or replace view i_app_node
as
/*application for middleware*/
select concat(dim.inventory_type_code,'-', midi.application_instance_id) as id
     , dim.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , im.inventory_name as name
     , null as service_names
     , im.inventory_detail_type_code as detail_type
     , concat('MW', '-', dima.discovered_instance_id) as parent_id
     , im.project_id
     , dim.discovered_ip_address as ip
     , 'Y' as is_inventory
     , im.inventory_id as engine_id
     , case when plr.solution_name is null then
                case when im.inventory_detail_type_code in ('EAR', 'WAR', 'JAR') then 'Java'
                     else null
                    end
            else plr.solution_name
    end as solution_name
     , null as running_status
from discovered_instance_master dim
         join inventory_master im
              on im.inventory_id = dim.possession_inventory_id
                  and dim.inventory_type_code = 'APP'
                  and im.inventory_type_code = 'APP'
         join middleware_instance_application_instance midi
              on midi.application_instance_id = dim.discovered_instance_id
         join discovered_instance_master dima
              on dima.discovered_instance_id = midi.middleware_instance_id
         left join inventory_lifecycle_version_link ilvl
                   on ilvl.inventory_id = im.inventory_id
         left join product_lifecycle_rules_version plrv
                   on plrv.product_lifecycle_rules_version_id = ilvl.java_version_id
         left join product_lifecycle_rules plr
                   on plr.product_lifecycle_rules_id = plrv.product_lifecycle_rules_id
where dim.delete_yn = 'N'
  and im.delete_yn = 'N'
union all
/*application for standalone*/
select concat(dim.inventory_type_code,'-', dim.discovered_instance_id) as id
     , dim.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , im.inventory_name as name
     , null as service_names
     , im.inventory_detail_type_code as detail_type
     , concat('SVR', '-', im.server_inventory_id) as parent_id
     , im.project_id
     , dim.discovered_ip_address as ip
     , 'Y' as is_inventory
     , im.inventory_id as engine_id
     , case when plr.solution_name is null then
                case when im.inventory_detail_type_code in ('EAR', 'WAR', 'JAR') then 'Java'
                     else null
                    end
            else plr.solution_name
    end as solution_name
     , null as running_status
from discovered_instance_master dim
         join inventory_master im
              on im.inventory_id = dim.possession_inventory_id
                  and dim.inventory_type_code = 'APP'
                  and im.inventory_type_code = 'APP'
                  and dim.delete_yn = 'N'
                  and im.delete_yn = 'N'
         left join middleware_instance_application_instance miai
                   on miai.application_instance_id = dim.discovered_instance_id
         left join inventory_lifecycle_version_link ilvl
                   on ilvl.inventory_id = im.inventory_id
         left join product_lifecycle_rules_version plrv
                   on plrv.product_lifecycle_rules_version_id = ilvl.java_version_id
         left join product_lifecycle_rules plr
                   on plr.product_lifecycle_rules_id = plrv.product_lifecycle_rules_id
where miai.application_instance_id is null;



create or replace view i_database_node
as
/*database for server*/
select concat(im.inventory_type_code,'-', di.database_instance_id) as id
     , im.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , di.database_service_name as name
     , null as service_namesㅁ
     , null as detail_type
     , concat('SVR', '-', im.server_inventory_id) as parent_id
     , im.project_id
     , dim.discovered_ip_address as ip
     , 'Y' as is_inventory
     , im.inventory_id as engine_id
     , case when plr.solution_name is null then cd.code_name_english
            else plr.solution_name
    end as solution_name
     , null as running_status
from discovered_instance_master dim
         join inventory_master im
              on im.inventory_id = dim.possession_inventory_id
         join database_instance di
              on di.database_instance_id = dim.discovered_instance_id
         left join inventory_lifecycle_version_link ilvl
                   on ilvl.inventory_id = im.inventory_id
         left join product_lifecycle_rules_version plrv
                   on plrv.product_lifecycle_rules_version_id = ilvl.product_version_id
         left join product_lifecycle_rules plr
                   on plr.product_lifecycle_rules_id = plrv.product_lifecycle_rules_id
         left join code_detail cd
                   on cd.common_code = im.inventory_detail_type_code
                       and cd.domain_code = 1013
where dim.inventory_type_code = 'DBMS'
  and dim.delete_yn = 'N'
  and im.delete_yn = 'N';



create or replace view i_discovered_datasource_node
as
/*disc dbms for project(not inventory)*/
select concat('DISC', '-', dim.inventory_type_code,'-', di.database_instance_id) as id
     , dim.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , concat(dim.discovered_ip_address, '-', dim.discovered_detail_division) as name
     , null as service_names
     , 'DBMS' as detail_type
     , 'ROOT' as parent_id
     , dim.project_id
     , dim.discovered_ip_address as ip
     , 'N' as is_inventory
     , null as engine_id
     , case
           when cd.code_name_english is null then dim.inventory_detail_type_code
           else cd.code_name_english
    end as solution_name
     , null as running_status
from discovered_instance_master dim
         join database_instance di
              on di.database_instance_id = dim.discovered_instance_id
         left join discovered_instance_master dims
                   on dims.discovered_ip_address = dim.discovered_ip_address
                       and dims.inventory_type_code = 'SVR'
         left join code_detail cd
                   on cd.common_code = dim.inventory_detail_type_code
                       and cd.domain_code = 1013
where dim.inventory_type_code = 'DBMS'
  and dim.delete_yn = 'N'
  and dim.possession_inventory_id is null;



create or replace view i_server_node
as
/*server for service*/
select concat(im.inventory_type_code,'-', im.inventory_id) as id
     , im.inventory_type_code as type
     , im.inventory_id as type_id
     , im.inventory_name as name
     , (select group_concat(svc.service_name separator ', ')
        from service_master svc join service_inventory si on svc.service_id = si.service_id
        where si.inventory_id = im.inventory_id) as service_names
     , 'INV' as detail_type
     , concat('SERV', '-', si.service_id) as parent_id
     , im.project_id
     , sm.representative_ip_address as ip
     , 'Y' as is_inventory
     , null as engine_id
     , case when plr.solution_name is null then ss.os_alias
            else plr.solution_name
    end as solution_name
     , null as running_status
from inventory_master im
         join service_inventory si
              on si.inventory_id  = im.inventory_id
         join server_master sm
              on sm.server_inventory_id = im.inventory_id
         left join inventory_lifecycle_version_link ilvl
                   on ilvl.inventory_id = im.inventory_id
         left join product_lifecycle_rules_version plrv
                   on plrv.product_lifecycle_rules_version_id = ilvl.product_version_id
         left join product_lifecycle_rules plr
                   on plr.product_lifecycle_rules_id = plrv.product_lifecycle_rules_id
         left join server_summary ss
                   on im.inventory_id = ss.server_inventory_id
where im.inventory_type_code = 'SVR'
  and im.delete_yn = 'N';



create or replace view i_middleware_node
as
/*middleware for server*/
select concat(im.inventory_type_code,'-', mi.middleware_instance_id) as id
     , im.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , mi.middleware_instance_name as name
     , null as service_names
     , mm.middleware_type_code as detail_type
     , concat('SVR', '-', im.server_inventory_id) as parent_id
     , im.project_id
     , sm.representative_ip_address as ip
     , 'Y' as is_inventory
     , im.inventory_id as engine_id
     , case when plr.solution_name is null then cd.code_name_english
            else plr.solution_name
    end as solution_name
     , case when mi.running_user is null or mi.running_user = '' then 'Stopped'
            else 'Running'
    end as running_status
from inventory_master im
         join middleware_master mm
              on mm.middleware_inventory_id = im.inventory_id
         join server_master sm
              on sm.server_inventory_id = im.server_inventory_id
         join discovered_instance_master dim
              on dim.possession_inventory_id = im.inventory_id
         join middleware_instance mi
              on mi.middleware_instance_id = dim.discovered_instance_id
         left join inventory_lifecycle_version_link ilvl
                   on ilvl.inventory_id = im.inventory_id
         left join product_lifecycle_rules_version plrv
                   on plrv.product_lifecycle_rules_version_id = ilvl.product_version_id
         left join product_lifecycle_rules plr
                   on plr.product_lifecycle_rules_id = plrv.product_lifecycle_rules_id
         left join code_detail cd
                   on cd.common_code = im.inventory_detail_type_code
                       and cd.domain_code = 1013
where im.inventory_type_code = 'MW'
  and im.delete_yn = 'N'
  and dim.delete_yn = 'N';



create or replace view v_ip_name_map
as
select im.inventory_name as name
     , sm.representative_ip_address as ip_address
     , sm.connection_port as port
     , im.inventory_type_code
     , im.project_id
     , 'Y' as is_inventory
from server_master sm
         join inventory_master im
              on im.inventory_id = sm.server_inventory_id
                  and im.delete_yn = 'N'
union
select if(im.inventory_id is null, concat('DISC_', dim.inventory_type_code), im.inventory_name) as name
     , dim.discovered_ip_address as ip_address
     , if(im.inventory_id is null, null, sm.connection_port)  as port
     , if(im.inventory_id is null, dim.inventory_type_code, im.inventory_type_code) as inventory_type_code
     , dim.project_id
     , if(im.inventory_id is null, 'N', 'Y') as is_inventory
from discovered_instance_master dim
         left join server_master sm
                   on sm.server_inventory_id = dim.possession_inventory_id
         left join inventory_master im
                   on im.inventory_id = dim.possession_inventory_id
                       and im.delete_yn = 'N'
where dim.inventory_type_code in ('SVR', 'DBMS');



create or replace view v_discovered_node
as
/*disc server for project(not inventory)*/
select concat('DISC', '-', dim.inventory_type_code,'-', dim.discovered_instance_id) as id
     , dim.inventory_type_code as type
     , dim.discovered_instance_id as type_id
     , 'DISC_SVR' as name
     , null as service_names
     , 'SVR' as detail_type
     , 'ROOT' as parent_id
     , dim.project_id
     , dim.discovered_ip_address as ip
     , 'N' as is_inventory
     , null as engine_id
     , null as solution_name
     , null as running_status
from discovered_instance_master dim
where dim.inventory_type_code = 'SVR'
  and dim.delete_yn = 'N'
  and dim.possession_inventory_id is null
union all
select *
from i_discovered_datasource_node;



create or replace view v_inventory_node
as
/*service info*/
select concat('SERV','-', service_id) as id
     , 'SERV' as type
     , service_id as type_id
     , service_name as name
     , null as service_names
     , 'SERV' as detail_type
     , 'ROOT' as parent_id
     , project_id
     , null as ip
     , 'Y' as is_inventory
     , null as engine_id
     , null as solution_name
     , null as running_status
from service_master
where delete_yn = 'N'
union all
select *
from i_server_node
union all
select *
from i_middleware_node
union all
/*database for server*/
select *
from i_database_node
union all
/* all applications */
select *
from i_app_node;


